import { createApi } from '@reduxjs/toolkit/query/react'
import { io, Socket } from 'socket.io-client'
import { getAccessToken } from '@/utils/utils'
import { baseURLChatBotAPI } from '@/constants/url'
import customFetchBaseChatbot from './customFetchBaseChatbot'

// Global socket and connection state
let socket: Socket | null = null
let isConnecting = false
const eventListeners: Record<string, boolean> = {}

// Th√™m theo d√µi cho c√°c l·ªói socket
let connectionErrors = 0
const MAX_CONNECTION_ERRORS = 5
let lastConnectionAttempt = 0
const CONNECTION_RETRY_DELAY = 2000 // 2 gi√¢y

const globalCallback = {
  chatbotResponse: null as ((message: string) => void) | null,
  messageSent: null as ((message: string) => void) | null
}

// Debug function to log with extra information
const debugLog = (message: string, ...args: any[]) => {
  console.log(`[SOCKET ${new Date().toISOString()}] ${message}`, ...args)
}

// H√†m ki·ªÉm tra URL
const validateSocketUrl = (url: string | undefined): string => {
  if (!url) {
    debugLog('‚ö†Ô∏è baseURLChatBotAPI kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong bi·∫øn m√¥i tr∆∞·ªùng, s·ª≠ d·ª•ng fallback')
    return ' http://103.69.87.243:5000/chatbot'
  }

  // ƒê·∫£m b·∫£o URL kh√¥ng k·∫øt th√∫c b·∫±ng d·∫•u /
  let cleanUrl = url.trim()
  if (cleanUrl.endsWith('/')) {
    cleanUrl = cleanUrl.slice(0, -1)
  }

  // Th√™m /chatbot n·∫øu ch∆∞a c√≥
  if (!cleanUrl.endsWith('/chatbot')) {
    cleanUrl += '/chatbot'
  }

  debugLog(`üîó Socket URL: ${cleanUrl}`)
  return cleanUrl
}

// H√†m tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn t·ª´ c√°c ƒë·ªãnh d·∫°ng kh√°c nhau
const extractMessageContent = (data: any): string => {
  if (!data) return ''

  debugLog('üîç D·ªØ li·ªáu tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c:', data)

  try {
    // Tr∆∞·ªùng h·ª£p 1: D·ªØ li·ªáu l√† ƒë·ªëi t∆∞·ª£ng c√≥ c·∫•u tr√∫c m·ªõi { userId, message: { type, content } }
    if (typeof data === 'object' && data.message && typeof data.message === 'object' && data.message.content) {
      return data.message.content
    }

    // Tr∆∞·ªùng h·ª£p 2: D·ªØ li·ªáu l√† ƒë·ªëi t∆∞·ª£ng ƒë∆°n gi·∫£n { message: string }
    if (typeof data === 'object' && typeof data.message === 'string') {
      return data.message
    }

    // Tr∆∞·ªùng h·ª£p 3: D·ªØ li·ªáu l√† m·∫£ng v·ªõi ph·∫ßn t·ª≠ th·ª© 2 ch·ª©a th√¥ng tin tin nh·∫Øn
    if (Array.isArray(data) && data.length > 1) {
      const secondItem = data[1]
      if (typeof secondItem === 'string') {
        return secondItem
      }

      if (typeof secondItem === 'object') {
        // Ki·ªÉm tra message c√≥ th·ªÉ l√† ƒë·ªëi t∆∞·ª£ng trong m·∫£ng
        if (secondItem.message) {
          if (typeof secondItem.message === 'string') {
            return secondItem.message
          }

          // N·∫øu message l√† m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ content
          if (typeof secondItem.message === 'object' && secondItem.message.content) {
            return secondItem.message.content
          }
        }
      }
    }

    // Tr∆∞·ªùng h·ª£p 4: D·ªØ li·ªáu l√† chu·ªói
    if (typeof data === 'string') {
      return data
    }

    // Tr∆∞·ªùng h·ª£p kh√¥ng kh·ªõp v·ªõi b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o tr√™n ƒë√¢y
    debugLog('‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn:', data)
    return ''
  } catch (error) {
    debugLog('‚ùå L·ªói khi tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn:', error)
    return ''
  }
}

export const chatbotApi = createApi({
  reducerPath: 'chatbotApi',
  baseQuery: customFetchBaseChatbot,
  tagTypes: ['Chatbot'],
  endpoints: (build) => ({
    connectChatbot: build.mutation<{ success: boolean }, void>({
      queryFn: () => {
        try {
          const token = getAccessToken()
          if (!token) {
            debugLog('‚ùå Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c')
            return { error: { status: 'CUSTOM_ERROR', error: 'No token found' } }
          }

          // Ki·ªÉm tra xem socket ƒë√£ k·∫øt n·ªëi ch∆∞a
          if (socket?.connected) {
            debugLog('‚úÖ Socket ƒë√£ k·∫øt n·ªëi v·ªõi ID:', socket.id)
            return { data: { success: true } }
          }

          // ƒê·∫£m b·∫£o kho·∫£ng c√°ch gi·ªØa c√°c l·∫ßn th·ª≠ k·∫øt n·ªëi
          const now = Date.now()
          if (isConnecting && now - lastConnectionAttempt < CONNECTION_RETRY_DELAY) {
            debugLog('‚è≥ ƒê√£ c√≥ y√™u c·∫ßu k·∫øt n·ªëi ƒëang trong ti·∫øn tr√¨nh')
            return { data: { success: false, message: 'Connection in progress' } }
          }

          // Reset tr·∫°ng th√°i v√† b·∫Øt ƒë·∫ßu k·∫øt n·ªëi m·ªõi
          isConnecting = true
          lastConnectionAttempt = now

          // Log ƒë·ªÉ theo d√µi vi·ªác thi·∫øt l·∫≠p k·∫øt n·ªëi
          debugLog('üîÑ ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi socket...')

          const setupSocket = () => {
            // ƒê√≥ng socket c≈© n·∫øu c√≥
            if (socket) {
              debugLog('üîå ƒê√≥ng k·∫øt n·ªëi socket c≈©')
              socket.disconnect()
              socket = null
            }

            // Ki·ªÉm tra v√† x·ª≠ l√Ω URL k·∫øt n·ªëi socket
            const socketUrl = validateSocketUrl(baseURLChatBotAPI)
            debugLog('üîó K·∫øt n·ªëi ƒë·∫øn:', socketUrl, 'v·ªõi token:', token ? 'C√≥ token' : 'Kh√¥ng c√≥ token')

            // Thi·∫øt l·∫≠p socket v·ªõi c√°c options
            socket = io(socketUrl, {
              auth: { token },
              transports: ['websocket', 'polling'],
              reconnectionAttempts: 5,
              reconnectionDelay: 1000,
              timeout: 20000, // TƒÉng timeout ƒë·ªÉ gi√∫p k·∫øt n·ªëi ·ªïn ƒë·ªãnh h∆°n
              forceNew: true, // Lu√¥n t·∫°o k·∫øt n·ªëi m·ªõi
              autoConnect: true // T·ª± ƒë·ªông k·∫øt n·ªëi ngay
            })

            // S·ª± ki·ªán k·∫øt n·ªëi th√†nh c√¥ng
            socket.on('connect', () => {
              debugLog('‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi chatbot server v·ªõi ID:', socket?.id)
              isConnecting = false
              connectionErrors = 0 // Reset b·ªô ƒë·∫øm l·ªói

              // Reset event listeners
              Object.keys(eventListeners).forEach((key) => {
                eventListeners[key] = false
              })

              // Thi·∫øt l·∫≠p s·ª± ki·ªán nh·∫≠n ph·∫£n h·ªìi t·ª´ chatbot
              if (socket && !eventListeners['chatbotResponse']) {
                socket.on('chatbotResponse', (data: any) => {
                  debugLog('Nh·∫≠n ph·∫£n h·ªìi t·ª´ chatbot:', data)

                  // Tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn t·ª´ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
                  const message = extractMessageContent(data)

                  if (globalCallback.chatbotResponse) {
                    globalCallback.chatbotResponse(message)
                  }
                })
                eventListeners['chatbotResponse'] = true
                debugLog('‚úÖ ƒê√£ ƒëƒÉng k√Ω listener cho s·ª± ki·ªán chatbotResponse')
              }

              // Thi·∫øt l·∫≠p s·ª± ki·ªán x√°c nh·∫≠n tin nh·∫Øn ƒë√£ g·ª≠i
              if (socket && !eventListeners['messageSent']) {
                socket.on('messageSent', (data: any) => {
                  debugLog('Nh·∫≠n x√°c nh·∫≠n tin nh·∫Øn ƒë√£ g·ª≠i:', data)

                  // Tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn t·ª´ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
                  const message = extractMessageContent(data)

                  if (globalCallback.messageSent) {
                    globalCallback.messageSent(message)
                  }
                })
                eventListeners['messageSent'] = true
                debugLog('‚úÖ ƒê√£ ƒëƒÉng k√Ω listener cho s·ª± ki·ªán messageSent')
              }
            })

            // S·ª± ki·ªán l·ªói k·∫øt n·ªëi
            socket.on('connect_error', (error) => {
              debugLog('‚ùå L·ªói k·∫øt n·ªëi socket:', error)
              connectionErrors++
              isConnecting = false

              // Th·ª≠ k·∫øt n·ªëi l·∫°i t·ª± ƒë·ªông n·∫øu ch∆∞a v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠
              if (connectionErrors < MAX_CONNECTION_ERRORS) {
                debugLog(
                  `‚è±Ô∏è Th·ª≠ k·∫øt n·ªëi l·∫°i sau ${CONNECTION_RETRY_DELAY}ms (l·∫ßn th·ª≠ ${connectionErrors}/${MAX_CONNECTION_ERRORS})`
                )
                setTimeout(() => {
                  debugLog('üîÑ Th·ª≠ k·∫øt n·ªëi l·∫°i...')
                  if (socket) {
                    socket.connect()
                  }
                }, CONNECTION_RETRY_DELAY)
              }
            })

            // S·ª± ki·ªán ng·∫Øt k·∫øt n·ªëi
            socket.on('disconnect', (reason) => {
              debugLog('üîå Ng·∫Øt k·∫øt n·ªëi t·ª´ chatbot server:', reason)

              // Reset c√°c event listeners
              Object.keys(eventListeners).forEach((key) => {
                eventListeners[key] = false
              })

              // N·∫øu ng·∫Øt k·∫øt n·ªëi kh√¥ng ph·∫£i do ch·ªß √Ω (io server disconnect ho·∫∑c io client disconnect)
              if (reason !== 'io server disconnect' && reason !== 'io client disconnect') {
                debugLog('‚è±Ô∏è Th·ª≠ k·∫øt n·ªëi l·∫°i t·ª± ƒë·ªông...')
                socket?.connect()
              }
            })

            // S·ª± ki·ªán l·ªói socket
            socket.on('error', (error: Error) => {
              debugLog('‚ùå L·ªói socket:', error)
              isConnecting = false
            })

            // S·ª± ki·ªán reconnect ƒë·ªÉ x√°c nh·∫≠n khi k·∫øt n·ªëi l·∫°i th√†nh c√¥ng
            socket.on('reconnect', (attemptNumber) => {
              debugLog(`‚úÖ K·∫øt n·ªëi l·∫°i th√†nh c√¥ng sau ${attemptNumber} l·∫ßn th·ª≠`)
              connectionErrors = 0
            })
          }

          // Th·ª±c hi·ªán thi·∫øt l·∫≠p socket
          setupSocket()

          // Ping server ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi
          setTimeout(() => {
            if (socket?.connected) {
              debugLog('‚úÖ X√°c nh·∫≠n k·∫øt n·ªëi ƒë√£ ·ªïn ƒë·ªãnh')
            } else {
              debugLog('‚ö†Ô∏è Socket ch∆∞a k·∫øt n·ªëi sau khi thi·∫øt l·∫≠p, c√≥ th·ªÉ c·∫ßn th·ª≠ l·∫°i')
              isConnecting = false
            }
          }, 2000)

          return { data: { success: true } }
        } catch (error) {
          debugLog('‚ùå L·ªói thi·∫øt l·∫≠p socket:', error)
          isConnecting = false
          return { error: { status: 'CUSTOM_ERROR', error: 'Failed to connect socket' } }
        }
      }
    }),

    sendMessage: build.mutation<{ success: boolean }, { message: string }>({
      queryFn: ({ message }) => {
        try {
          // Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn
          if (!socket) {
            debugLog('‚ùå Socket ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o khi g·ª≠i tin nh·∫Øn')
            return { error: { status: 'CUSTOM_ERROR', error: 'Socket not initialized' } }
          }

          if (!socket.connected) {
            debugLog('‚ùå Socket ch∆∞a k·∫øt n·ªëi khi g·ª≠i tin nh·∫Øn, th·ª≠ k·∫øt n·ªëi l·∫°i')
            socket.connect()
            return { error: { status: 'CUSTOM_ERROR', error: 'Socket not connected' } }
          }

          debugLog('üì§ G·ª≠i tin nh·∫Øn:', message)
          socket.emit('sendMessage', { message })
          return { data: { success: true } }
        } catch (error) {
          debugLog('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:', error)
          return { error: { status: 'CUSTOM_ERROR', error: 'Failed to send message' } }
        }
      }
    }),

    disconnectChatbot: build.mutation<{ success: boolean }, void>({
      queryFn: () => {
        try {
          if (socket) {
            debugLog('üîå Ng·∫Øt k·∫øt n·ªëi socket theo y√™u c·∫ßu')
            socket.disconnect()
            socket = null
            isConnecting = false
          } else {
            debugLog('‚ÑπÔ∏è Kh√¥ng c√≥ socket ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi')
          }
          return { data: { success: true } }
        } catch (error) {
          debugLog('‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi socket:', error)
          return { error: { status: 'CUSTOM_ERROR', error: 'Failed to disconnect socket' } }
        }
      }
    }),

    pingChatbot: build.mutation<{ connected: boolean }, void>({
      queryFn: () => {
        try {
          const connected = !!socket && socket.connected
          debugLog(`üîç Ki·ªÉm tra k·∫øt n·ªëi socket: ${connected ? 'ƒë√£ k·∫øt n·ªëi' : 'ch∆∞a k·∫øt n·ªëi'}`)

          // K·∫øt n·ªëi l·∫°i n·∫øu socket ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o nh∆∞ng ch∆∞a k·∫øt n·ªëi
          if (socket && !socket.connected) {
            debugLog('üîÑ Ph√°t hi·ªán socket ch∆∞a k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi l·∫°i')
            socket.connect()
          }

          return { data: { connected } }
        } catch (error) {
          debugLog('‚ùå L·ªói khi ki·ªÉm tra k·∫øt n·ªëi socket:', error)
          return { error: { status: 'CUSTOM_ERROR', error: 'Failed to check socket connection' } }
        }
      }
    })
  })
})

export const {
  useConnectChatbotMutation,
  useSendMessageMutation,
  useDisconnectChatbotMutation,
  usePingChatbotMutation
} = chatbotApi

export const listenForChatbotResponse = (callback: (message: string) => void) => {
  debugLog('‚úÖ ƒêƒÉng k√Ω callback cho chatbotResponse')
  globalCallback.chatbotResponse = callback
}

export const listenForMessageSent = (callback: (message: string) => void) => {
  debugLog('‚úÖ ƒêƒÉng k√Ω callback cho messageSent')
  globalCallback.messageSent = callback
}

/**
 * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi hi·ªán t·∫°i c·ªßa socket
 * @returns {boolean} true n·∫øu socket ƒë√£ k·∫øt n·ªëi, false n·∫øu kh√¥ng
 */
export const getSocketConnectionStatus = (): boolean => {
  const isConnected = !!socket && socket.connected
  debugLog(`üîç Tr·∫°ng th√°i k·∫øt n·ªëi socket: ${isConnected ? 'ƒë√£ k·∫øt n·ªëi' : 'ch∆∞a k·∫øt n·ªëi'}`)
  return isConnected
}

/**
 * K·∫øt n·ªëi l·∫°i socket m·ªôt c√°ch ch·ªß ƒë·ªông
 * @returns {Promise<boolean>} Promise tr·∫£ v·ªÅ true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
 */
export const reconnectSocket = async (): Promise<boolean> => {
  debugLog('üîÑ K·∫øt n·ªëi l·∫°i socket theo y√™u c·∫ßu')

  if (!socket) {
    debugLog('‚ùå Kh√¥ng c√≥ socket ƒë·ªÉ k·∫øt n·ªëi l·∫°i, c·∫ßn kh·ªüi t·∫°o m·ªõi')
    return false
  }

  try {
    socket.connect()

    // ƒê·ª£i k·∫øt n·ªëi ho√†n t·∫•t
    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        resolve(false)
        debugLog('‚è±Ô∏è H·∫øt th·ªùi gian ch·ªù k·∫øt n·ªëi l·∫°i')
      }, 5000)

      const connectHandler = () => {
        clearTimeout(timeout)
        socket?.off('connect', connectHandler)
        debugLog('‚úÖ K·∫øt n·ªëi l·∫°i th√†nh c√¥ng')
        resolve(true)
      }

      socket?.once('connect', connectHandler)
    })
  } catch (error) {
    debugLog('‚ùå L·ªói khi k·∫øt n·ªëi l·∫°i socket:', error)
    return false
  }
}
